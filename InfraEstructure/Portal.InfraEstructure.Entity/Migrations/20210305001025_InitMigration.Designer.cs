// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Portal.InfraEstructure.Entity.Context;

namespace Portal.InfraEstructure.Entity.Migrations
{
    [DbContext(typeof(PortalContext))]
    [Migration("20210305001025_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Portal.Model.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AcessTokenLifetime")
                        .HasColumnType("integer");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoClientUri")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("TokenLifetime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasDiscriminator<string>("ClientType").HasValue("Client");
                });

            modelBuilder.Entity("Portal.Model.Clients.ClientScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ScopeLabel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("ClientScopes");
                });

            modelBuilder.Entity("Portal.Model.Clients.CorsOrigin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("CorsOrigins");
                });

            modelBuilder.Entity("Portal.Model.Clients.RedirectLogout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("RedirectLogouts");
                });

            modelBuilder.Entity("Portal.Model.Clients.RedirectUri", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdClient")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdClient");

                    b.ToTable("RedirectUris");
                });

            modelBuilder.Entity("Portal.Model.Clients.WebAppClient", b =>
                {
                    b.HasBaseType("Portal.Model.Clients.Client");

                    b.Property<string>("ClientUri")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasDiscriminator().HasValue("WebAppClient");
                });

            modelBuilder.Entity("Portal.Model.Clients.ClientScope", b =>
                {
                    b.HasOne("Portal.Model.Clients.Client", "Client")
                        .WithMany("AcceptScope")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Portal.Model.Clients.CorsOrigin", b =>
                {
                    b.HasOne("Portal.Model.Clients.WebAppClient", "WebAppClient")
                        .WithMany("AcceptCorsOrigin")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebAppClient");
                });

            modelBuilder.Entity("Portal.Model.Clients.RedirectLogout", b =>
                {
                    b.HasOne("Portal.Model.Clients.WebAppClient", "WebAppClient")
                        .WithMany("AcceptRedirectLogout")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebAppClient");
                });

            modelBuilder.Entity("Portal.Model.Clients.RedirectUri", b =>
                {
                    b.HasOne("Portal.Model.Clients.WebAppClient", "WebAppClient")
                        .WithMany("AcceptRedirect")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebAppClient");
                });

            modelBuilder.Entity("Portal.Model.Clients.Client", b =>
                {
                    b.Navigation("AcceptScope");
                });

            modelBuilder.Entity("Portal.Model.Clients.WebAppClient", b =>
                {
                    b.Navigation("AcceptCorsOrigin");

                    b.Navigation("AcceptRedirect");

                    b.Navigation("AcceptRedirectLogout");
                });
#pragma warning restore 612, 618
        }
    }
}
